"""
Penetration Testing Framework - Configuration Examples
======================================================

This file provides comprehensive examples for configuring and using the
Enhanced Penetration Testing Framework for enterprise security assessments.

Classification: UNCLASSIFIED//FOR OFFICIAL USE ONLY
Version: 1.0 - Configuration Examples
Author: Security Testing Team
Date: 2025-07-28
"""

import asyncio
import json
import logging
from datetime import datetime, timezone
from pathlib import Path
from typing import List, Dict, Any

# Import the penetration testing framework
from .penetration_testing_framework import (
    EnhancedPenetrationTestingFramework,
    PenetrationTestTarget,
    TestScope,
    PenetrationTestPhase,
    create_enhanced_penetration_testing_framework
)

# Import supporting infrastructure (optional for testing)
try:
    from ..audits.audit_logger import AuditLogger
    from ..audits.enhanced_monitoring_system import EnhancedMonitoringSystem
    from ..audits.real_time_alerting import RealTimeAlerting
except ImportError:
    # Use mock classes for testing
    AuditLogger = None
    EnhancedMonitoringSystem = None
    RealTimeAlerting = None

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class PenetrationTestConfiguration:
    """Configuration manager for penetration testing operations."""
    
    def __init__(self):
        """Initialize configuration manager."""
        self.config_path = Path(__file__).parent / "config"
        self.config_path.mkdir(exist_ok=True)
        
        # Default configuration
        self.default_config = {
            "test_settings": {
                "max_concurrent_tests": 3,
                "test_timeout_hours": 24,
                "enable_advanced_techniques": True,
                "enable_continuous_monitoring": True,
                "generate_comprehensive_reports": True
            },
            "exploit_settings": {
                "max_exploit_attempts": 50,
                "max_concurrent_exploits": 5,
                "exploit_timeout_seconds": 300,
                "enable_lateral_movement": True,
                "enable_persistence_testing": True,
                "enable_defense_evasion": True
            },
            "safety_controls": {
                "require_authorization": True,
                "authorization_expiry_days": 30,
                "enable_safe_mode": True,
                "simulate_destructive_tests": True,
                "auto_cleanup": True
            },
            "reporting": {
                "generate_html": True,
                "generate_json": True,
                "generate_csv": True,
                "generate_stig": True,
                "generate_pdf": False,  # Requires additional dependencies
                "include_executive_summary": True,
                "include_technical_details": True
            },
            "compliance": {
                "enforce_dod_standards": True,
                "enforce_nist_guidelines": True,
                "generate_stig_checklist": True,
                "classification_level": "UNCLASSIFIED//FOR OFFICIAL USE ONLY"
            }
        }
    
    def save_configuration(self, config: Dict[str, Any], config_name: str = "default"):
        """Save configuration to file."""
        config_file = self.config_path / f"{config_name}_config.json"
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        logger.info(f"Configuration saved: {config_file}")
    
    def load_configuration(self, config_name: str = "default") -> Dict[str, Any]:
        """Load configuration from file."""
        config_file = self.config_path / f"{config_name}_config.json"
        if config_file.exists():
            with open(config_file, 'r') as f:
                return json.load(f)
        return self.default_config


def create_example_targets() -> List[PenetrationTestTarget]:
    """Create example penetration test targets."""
    targets = []
    
    # Web application target
    web_target = PenetrationTestTarget(
        hostname="webapp.example.com",
        ip_address="10.1.1.100",
        port_range="80,443,8080,8443",
        network_segment="DMZ",
        network_classification="UNCLASSIFIED",
        application_name="Enterprise Web Portal",
        application_version="2.1.0",
        technology_stack=["nginx", "php", "mysql", "redis"],
        allowed_tests=[
            "web_application_testing",
            "authentication_testing",
            "input_validation_testing",
            "session_management_testing"
        ],
        forbidden_tests=[
            "dos_testing",
            "destructive_testing"
        ],
        test_windows=["weekends", "after_hours"],
        authorized_by="CISO",
        authorization_date=datetime.now(timezone.utc),
        poc_contact="security-team@example.com",
        business_criticality="high",
        downtime_tolerance="low",
        data_sensitivity="sensitive"
    )
    targets.append(web_target)
    
    # Database server target
    db_target = PenetrationTestTarget(
        hostname="db.internal.com",
        ip_address="10.2.1.50",
        port_range="3306,5432,1433",
        network_segment="Internal_DB",
        network_classification="CONFIDENTIAL",
        application_name="Enterprise Database Cluster",
        application_version="8.0.28",
        technology_stack=["mysql", "postgresql", "redis"],
        allowed_tests=[
            "database_security_testing",
            "authentication_testing",
            "privilege_escalation_testing"
        ],
        forbidden_tests=[
            "data_extraction",
            "data_modification",
            "schema_changes"
        ],
        test_windows=["maintenance_windows"],
        authorized_by="Database Administrator",
        authorization_date=datetime.now(timezone.utc),
        poc_contact="dba-team@example.com",
        business_criticality="critical",
        downtime_tolerance="none",
        data_sensitivity="classified"
    )
    targets.append(db_target)
    
    # Infrastructure target
    infra_target = PenetrationTestTarget(
        hostname="server.corp.com",
        ip_address="10.3.1.25",
        port_range="22,80,443,3389,5985",
        network_segment="Corporate_LAN",
        network_classification="CONFIDENTIAL",
        application_name="Corporate Infrastructure Server",
        application_version="Windows Server 2022",
        technology_stack=["windows", "iis", "powershell", "activedirectory"],
        allowed_tests=[
            "network_scanning",
            "service_enumeration",
            "privilege_escalation_testing",
            "lateral_movement_testing"
        ],
        forbidden_tests=[
            "credential_harvesting",
            "persistent_access"
        ],
        test_windows=["business_hours"],
        authorized_by="Infrastructure Manager",
        authorization_date=datetime.now(timezone.utc),
        poc_contact="infra-team@example.com",
        business_criticality="high",
        downtime_tolerance="medium",
        data_sensitivity="sensitive"
    )
    targets.append(infra_target)
    
    return targets


async def example_basic_penetration_test():
    """Example: Basic penetration test execution."""
    logger.info("=== Basic Penetration Test Example ===")
    
    # Create mock infrastructure components (in production, use real implementations)
    audit_logger = None  # Would be actual AuditLogger instance
    monitoring_system = None  # Would be actual EnhancedMonitoringSystem instance
    real_time_alerting = None  # Would be actual RealTimeAlerting instance
    
    # Create penetration testing framework
    framework = create_enhanced_penetration_testing_framework(
        audit_logger=audit_logger,
        monitoring_system=monitoring_system,
        real_time_alerting=real_time_alerting
    )
    
    # Configure test targets
    targets = create_example_targets()
    logger.info(f"Configured {len(targets)} test targets")
    
    # Execute penetration test
    try:
        logger.info("Starting penetration test...")
        report = await framework.execute_penetration_test(
            targets=targets,
            test_scope=TestScope.INTERNAL
        )
        
        logger.info(f"Penetration test completed successfully")
        logger.info(f"Test Report ID: {report.report_id}")
        logger.info(f"Total Vulnerabilities: {report.total_vulnerabilities}")
        logger.info(f"Successful Exploits: {report.successful_exploits}")
        logger.info(f"Overall Risk Rating: {report.overall_risk_rating}")
        
        return report
        
    except Exception as e:
        logger.error(f"Penetration test failed: {e}")
        raise


async def example_comprehensive_penetration_test():
    """Example: Comprehensive penetration test with advanced techniques."""
    logger.info("=== Comprehensive Penetration Test Example ===")
    
    # Create mock infrastructure components
    audit_logger = None  # Would be actual AuditLogger instance
    monitoring_system = None  # Would be actual EnhancedMonitoringSystem instance
    real_time_alerting = None  # Would be actual RealTimeAlerting instance
    
    # Create enhanced penetration testing framework
    framework = create_enhanced_penetration_testing_framework(
        audit_logger=audit_logger,
        monitoring_system=monitoring_system,
        real_time_alerting=real_time_alerting
    )
    
    # Configure test targets
    targets = create_example_targets()
    
    # Execute comprehensive penetration test
    try:
        logger.info("Starting comprehensive penetration test with advanced techniques...")
        report = await framework.execute_comprehensive_penetration_test(
            targets=targets,
            test_scope=TestScope.RED_TEAM,
            include_advanced_techniques=True,
            enable_monitoring=True
        )
        
        logger.info("Comprehensive penetration test completed")
        logger.info(f"Test Report ID: {report.report_id}")
        logger.info(f"Total Vulnerabilities: {report.total_vulnerabilities}")
        logger.info(f"Critical Vulnerabilities: {report.critical_vulnerabilities}")
        logger.info(f"High Vulnerabilities: {report.high_vulnerabilities}")
        logger.info(f"Successful Exploits: {report.successful_exploits}")
        logger.info(f"Systems Compromised: {report.systems_compromised}")
        logger.info(f"Overall Risk Rating: {report.overall_risk_rating}")
        
        # Display executive summary
        print("\n" + "="*60)
        print("EXECUTIVE SUMMARY")
        print("="*60)
        print(report.executive_summary)
        
        # Display immediate actions
        if report.immediate_actions:
            print("\n" + "="*60)
            print("IMMEDIATE ACTIONS REQUIRED")
            print("="*60)
            for i, action in enumerate(report.immediate_actions, 1):
                print(f"{i}. {action}")
        
        return report
        
    except Exception as e:
        logger.error(f"Comprehensive penetration test failed: {e}")
        raise


async def example_custom_test_phases():
    """Example: Custom penetration test with specific phases."""
    logger.info("=== Custom Test Phases Example ===")
    
    # Create mock infrastructure components
    audit_logger = None
    monitoring_system = None
    real_time_alerting = None
    
    # Create framework
    framework = create_enhanced_penetration_testing_framework(
        audit_logger=audit_logger,
        monitoring_system=monitoring_system,
        real_time_alerting=real_time_alerting
    )
    
    # Configure limited targets for focused testing
    web_target = create_example_targets()[0]  # Just the web application
    
    # Execute specific test phases
    custom_phases = [
        PenetrationTestPhase.RECONNAISSANCE,
        PenetrationTestPhase.SCANNING,
        PenetrationTestPhase.VULNERABILITY_ASSESSMENT,
        PenetrationTestPhase.EXPLOITATION
        # Skip post-exploitation and cleanup for this example
    ]
    
    try:
        logger.info("Starting custom phase penetration test...")
        report = await framework.execute_penetration_test(
            targets=[web_target],
            test_scope=TestScope.WEB_APPLICATION,
            test_phases=custom_phases
        )
        
        logger.info("Custom phase test completed")
        logger.info(f"Phases executed: {[phase.value for phase in custom_phases]}")
        logger.info(f"Findings: {len(report.security_findings)}")
        
        return report
        
    except Exception as e:
        logger.error(f"Custom phase test failed: {e}")
        raise


def example_configuration_management():
    """Example: Configuration management for penetration testing."""
    logger.info("=== Configuration Management Example ===")
    
    config_manager = PenetrationTestConfiguration()
    
    # Create custom configuration
    custom_config = config_manager.default_config.copy()
    custom_config["test_settings"]["enable_advanced_techniques"] = False
    custom_config["exploit_settings"]["enable_lateral_movement"] = False
    custom_config["safety_controls"]["simulate_destructive_tests"] = True
    custom_config["reporting"]["generate_pdf"] = True
    
    # Save custom configuration
    config_manager.save_configuration(custom_config, "safe_testing")
    logger.info("Custom configuration saved")
    
    # Load and display configuration
    loaded_config = config_manager.load_configuration("safe_testing")
    logger.info("Configuration loaded successfully")
    
    # Display key settings
    print("\n" + "="*50)
    print("PENETRATION TEST CONFIGURATION")
    print("="*50)
    print(f"Advanced Techniques: {loaded_config['test_settings']['enable_advanced_techniques']}")
    print(f"Lateral Movement: {loaded_config['exploit_settings']['enable_lateral_movement']}")
    print(f"Safe Mode: {loaded_config['safety_controls']['enable_safe_mode']}")
    print(f"Generate Reports: {loaded_config['reporting']['generate_html']}")
    print(f"DoD Compliance: {loaded_config['compliance']['enforce_dod_standards']}")
    
    return loaded_config


async def example_target_configuration():
    """Example: Detailed target configuration."""
    logger.info("=== Target Configuration Example ===")
    
    # Create a comprehensive target configuration
    target = PenetrationTestTarget(
        hostname="secure-app.defense.gov",
        ip_address="192.168.100.50",
        port_range="80,443,8080,8443,22,3389",
        network_segment="DMZ_Segment_A",
        vlan_id=100,
        network_classification="CONFIDENTIAL",
        application_name="Defense Portal Application",
        application_version="3.2.1",
        technology_stack=[
            "nginx/1.18.0",
            "php/8.0",
            "mysql/8.0.28",
            "redis/6.2",
            "elasticsearch/7.15"
        ],
        allowed_tests=[
            "reconnaissance",
            "port_scanning",
            "service_enumeration",
            "web_application_testing",
            "authentication_testing",
            "authorization_testing",
            "input_validation",
            "session_management",
            "ssl_tls_testing",
            "configuration_review"
        ],
        forbidden_tests=[
            "dos_testing",
            "data_extraction",
            "data_modification",
            "user_account_creation",
            "system_modification",
            "malware_deployment"
        ],
        test_windows=[
            "weekends: 06:00-18:00 EST",
            "weekdays: 20:00-06:00 EST",
            "maintenance_window: first_sunday_monthly"
        ],
        authorized_by="Chief Information Security Officer",
        authorization_date=datetime.now(timezone.utc),
        poc_contact="security-ops@defense.gov",
        business_criticality="critical",
        downtime_tolerance="none",
        data_sensitivity="classified"
    )
    
    # Display target configuration
    print("\n" + "="*60)
    print("TARGET CONFIGURATION")
    print("="*60)
    print(f"Hostname: {target.hostname}")
    print(f"IP Address: {target.ip_address}")
    print(f"Classification: {target.network_classification}")
    print(f"Business Criticality: {target.business_criticality}")
    print(f"Data Sensitivity: {target.data_sensitivity}")
    print(f"Authorized By: {target.authorized_by}")
    print(f"Authorization Date: {target.authorization_date.isoformat()}")
    
    print(f"\nAllowed Tests ({len(target.allowed_tests)}):")
    for test in target.allowed_tests:
        print(f"  ✓ {test}")
    
    print(f"\nForbidden Tests ({len(target.forbidden_tests)}):")
    for test in target.forbidden_tests:
        print(f"  ✗ {test}")
    
    print(f"\nTest Windows:")
    for window in target.test_windows:
        print(f"  • {window}")
    
    return target


async def example_monitoring_integration():
    """Example: Monitoring integration during penetration testing."""
    logger.info("=== Monitoring Integration Example ===")
    
    # This example shows how the framework integrates with monitoring systems
    # In a real environment, this would connect to actual SIEM/monitoring platforms
    
    print("\n" + "="*60)
    print("MONITORING INTEGRATION EXAMPLE")
    print("="*60)
    
    print("1. Pre-Test Monitoring Setup:")
    print("   • Configure test-specific detection rules")
    print("   • Set up baseline metrics")
    print("   • Enable activity correlation")
    
    print("\n2. During Test Monitoring:")
    print("   • Real-time activity detection")
    print("   • False positive identification")
    print("   • Attack chain correlation")
    print("   • Defense effectiveness measurement")
    
    print("\n3. Post-Test Analysis:")
    print("   • Detection rate calculation")
    print("   • Monitoring gap identification")
    print("   • Alert tuning recommendations")
    print("   • Security control validation")
    
    # Example monitoring data
    monitoring_results = {
        "test_id": "pentest_20250728_001",
        "detection_rate": 0.75,
        "false_positive_rate": 0.12,
        "detected_activities": [
            "port_scanning",
            "web_application_probing",
            "authentication_attempts"
        ],
        "undetected_activities": [
            "lateral_movement_simulation",
            "privilege_escalation_attempt"
        ],
        "recommendations": [
            "Enhance lateral movement detection rules",
            "Implement privilege escalation monitoring",
            "Adjust authentication failure thresholds"
        ]
    }
    
    print("\n4. Example Results:")
    for key, value in monitoring_results.items():
        if isinstance(value, list):
            print(f"   {key}: {len(value)} items")
            for item in value:
                print(f"     • {item}")
        else:
            print(f"   {key}: {value}")
    
    return monitoring_results


async def run_all_examples():
    """Run all penetration testing examples."""
    print("ENHANCED PENETRATION TESTING FRAMEWORK")
    print("=" * 60)
    print("Classification: UNCLASSIFIED//FOR OFFICIAL USE ONLY")
    print("Enterprise Security Testing Demonstration")
    print("=" * 60)
    
    try:
        # Configuration examples
        print("\n1. Configuration Management:")
        example_configuration_management()
        
        # Target configuration
        print("\n2. Target Configuration:")
        await example_target_configuration()
        
        # Monitoring integration
        print("\n3. Monitoring Integration:")
        await example_monitoring_integration()
        
        # Basic penetration test
        print("\n4. Basic Penetration Test:")
        # await example_basic_penetration_test()  # Commented out - requires real infrastructure
        print("   [Simulation mode - requires production infrastructure]")
        
        # Comprehensive penetration test
        print("\n5. Comprehensive Penetration Test:")
        # await example_comprehensive_penetration_test()  # Commented out - requires real infrastructure
        print("   [Simulation mode - requires production infrastructure]")
        
        # Custom test phases
        print("\n6. Custom Test Phases:")
        # await example_custom_test_phases()  # Commented out - requires real infrastructure
        print("   [Simulation mode - requires production infrastructure]")
        
        print("\n" + "="*60)
        print("DEMONSTRATION COMPLETED")
        print("="*60)
        print("The Enhanced Penetration Testing Framework provides:")
        print("• Comprehensive automated security testing")
        print("• Advanced exploitation techniques")
        print("• Professional reporting and documentation")
        print("• DoD and NIST compliance alignment")
        print("• Integration with monitoring and audit systems")
        print("• Enterprise-grade safety and authorization controls")
        
    except Exception as e:
        logger.error(f"Example execution failed: {e}")
        raise


if __name__ == "__main__":
    # Run examples
    asyncio.run(run_all_examples())