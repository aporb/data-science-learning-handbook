version: '3.8'

services:
  # Jupyter Lab for development
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    ports:
      - "8888:8888"
      - "8501:8501"  # Streamlit
      - "8050:8050"  # Dash
    volumes:
      - ./:/workspace
      - jupyter_data:/home/jovyan/.jupyter
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - ds-handbook
    restart: unless-stopped

  # MLflow tracking server
  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/app/mlruns
      - mlflow_artifacts:/app/mlartifacts
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow:mlflow@postgres:5432/mlflow
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/app/mlartifacts
    depends_on:
      - postgres
    networks:
      - ds-handbook
    restart: unless-stopped

  # PostgreSQL for MLflow backend
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=mlflow
      - POSTGRES_PASSWORD=mlflow
      - POSTGRES_DB=mlflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - ds-handbook
    restart: unless-stopped

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ds-handbook
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - jupyter
      - mlflow
    networks:
      - ds-handbook
    restart: unless-stopped

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ds-handbook
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - ds-handbook
    restart: unless-stopped

  # Security scanner service
  security-scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile.security
    volumes:
      - ./:/app
      - ./reports:/app/reports
    environment:
      - SECURITY_SCAN_SCHEDULE=0 2 * * *
    networks:
      - ds-handbook
    restart: unless-stopped

  # Documentation server
  docs:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./docker/nginx/docs.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - ds-handbook
    restart: unless-stopped

  # Consul for Vault HA backend
  consul:
    image: hashicorp/consul:1.16.1
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul_data:/consul/data
      - ./docker/vault/consul.hcl:/consul/config/consul.hcl:ro
    command: consul agent -config-file=/consul/config/consul.hcl
    networks:
      ds-handbook:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 3s
      retries: 3

  # HashiCorp Vault for credential management
  vault:
    build:
      context: .
      dockerfile: docker/Dockerfile.vault
    ports:
      - "8200:8200"
      - "8201:8201"
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - vault_tls:/vault/tls
      - ./docker/vault/scripts:/vault/scripts:ro
    environment:
      - VAULT_ADDR=https://0.0.0.0:8200
      - VAULT_API_ADDR=https://vault:8200
      - VAULT_CLUSTER_ADDR=https://vault:8201
      - VAULT_UI=true
      - VAULT_LOG_LEVEL=info
      - VAULT_LOG_FORMAT=json
      - VAULT_DISABLE_MLOCK=true
    depends_on:
      consul:
        condition: service_healthy
    networks:
      ds-handbook:
        ipv4_address: 172.20.0.11
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    cap_add:
      - IPC_LOCK

  # Vault initialization service (runs once)
  vault-init:
    build:
      context: .
      dockerfile: docker/Dockerfile.vault
    volumes:
      - vault_data:/vault/data
      - ./docker/vault/scripts:/vault/scripts:ro
    environment:
      - VAULT_ADDR=https://vault:8200
      - VAULT_SKIP_VERIFY=true
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - ds-handbook
    command: ["/vault/scripts/init-vault.sh"]
    restart: "no"

volumes:
  jupyter_data:
  mlflow_data:
  mlflow_artifacts:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  consul_data:
  vault_data:
  vault_logs:
  vault_tls:

networks:
  ds-handbook:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
